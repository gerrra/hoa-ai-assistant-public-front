import { useState, useEffect } from 'react'
import { chatManager } from '../utils/chatManager'
import { storageManager } from '../utils/storageManager'

export interface ChatMessage {
  id: number
  role: string
  content: string
  created_at: string
  meta?: any
}

export interface ChatConversation {
  id: string
  title: string
  created_at: string
  updated_at: string
  message_count: number
}

export function useChatHistory() {
  const [conversationId, setConversationId] = useState<string | null>(null)
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [conversations, setConversations] = useState<ChatConversation[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // Initialize conversation ID on mount
  useEffect(() => {
    const initConversation = async () => {
      try {
        setLoading(true)
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç...')
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π conversation ID
        const savedId = chatManager.getCurrentConversationId()
        console.log('üìñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID –∏–∑ localStorage:', savedId)
        
        if (savedId) {
          // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é conversation
          try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é conversation:', savedId)
            const { messages: msgs, conversationId: validId } = await chatManager.getMessages(savedId)
            
            // –ï—Å–ª–∏ ID –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            if (validId !== savedId) {
              console.log('üîÑ Conversation ID –∏–∑–º–µ–Ω–∏–ª—Å—è —Å', savedId, '–Ω–∞', validId)
              chatManager.forceUpdateConversationId(validId)
            }
            
            setConversationId(validId)
            setMessages(msgs)
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è conversation:', validId, '—Å–æ–æ–±—â–µ–Ω–∏–π:', msgs.length)
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é conversation, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é')
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞:', error)
            const newData = await chatManager.createNewConversation('–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥')
            setConversationId(newData.conversation_id)
            setMessages([])
          }
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é conversation
          console.log('üÜï –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é conversation')
          const newData = await chatManager.createNewConversation('–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥')
          setConversationId(newData.conversation_id)
          setMessages([])
          console.log('üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è conversation:', newData.conversation_id)
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ conversations
        const convos = await chatManager.getConversations()
        setConversations(convos)
        console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ conversations:', convos.length)
        
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞:', err)
        setError(err instanceof Error ? err.message : 'Failed to load chat history')
        
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é conversation
        try {
          const newData = await chatManager.createNewConversation('–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥')
          setConversationId(newData.conversation_id)
          setMessages([])
        } catch (newErr) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è conversation:', newErr)
        }
      } finally {
        setLoading(false)
      }
    }

    initConversation()
  }, [])

  const refreshMessages = async (cid?: string) => {
    const targetCid = cid || conversationId
    if (!targetCid) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç conversation ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π')
      return
    }

    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è conversation:', targetCid)
      const { messages: msgs, conversationId: validId } = await chatManager.getMessages(targetCid)
      
      console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è:', msgs.map(m => ({ id: m.id, role: m.role, content: m.content?.substring(0, 50) + '...' })))
      setMessages(msgs)
      
      // –ï—Å–ª–∏ conversation ID –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      if (validId !== targetCid) {
        console.log('üîÑ Conversation ID –∏–∑–º–µ–Ω–∏–ª—Å—è —Å', targetCid, '–Ω–∞', validId)
        setConversationId(validId)
        storageManager.saveConversationId(validId)
      } else {
        console.log('‚úÖ Conversation ID –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ:', validId)
      }
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', msgs.length)
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', err)
      setError(err instanceof Error ? err.message : 'Failed to refresh messages')
    }
  }

  const switchConversation = async (cid: string) => {
    try {
      setLoading(true)
      console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ conversation:', cid)
      
      const { messages: msgs, conversationId: validId } = await chatManager.getMessages(cid)
      
      setConversationId(validId)
      setMessages(msgs)
      storageManager.saveConversationId(validId)
      
      console.log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–π:', msgs.length)
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è conversation:', err)
      setError(err instanceof Error ? err.message : 'Failed to switch conversation')
    } finally {
      setLoading(false)
    }
  }

  const addMessage = (message: ChatMessage) => {
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', { id: message.id, role: message.role, content: message.content?.substring(0, 50) + '...' })
    setMessages(prev => [...prev, message])
  }

  const updateConversationId = (newId: string) => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º conversation ID –≤ —Ö—É–∫–µ —Å', conversationId, '–Ω–∞', newId)
    setConversationId(newId)
    chatManager.forceUpdateConversationId(newId)
  }

  const createNewConversation = async () => {
    try {
      setLoading(true)
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é conversation...')
      console.log('üîÑ –¢–µ–∫—É—â–∏–π ID –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º:', conversationId)
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π ID
      chatManager.clearConversation()
      
      const newData = await chatManager.createNewConversation('–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥')
      setConversationId(newData.conversation_id)
      setMessages([])
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ conversations
      const convos = await chatManager.getConversations()
      setConversations(convos)
      
      console.log('‚úÖ –ù–æ–≤–∞—è conversation —Å–æ–∑–¥–∞–Ω–∞:', newData.conversation_id)
      console.log('‚úÖ ID –≤ localStorage –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:', localStorage.getItem('conversationId'))
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π conversation:', err)
      setError(err instanceof Error ? err.message : 'Failed to create new conversation')
    } finally {
      setLoading(false)
    }
  }

  return {
    conversationId,
    messages,
    conversations,
    loading,
    error,
    refreshMessages,
    switchConversation,
    addMessage,
    createNewConversation,
    updateConversationId
  }
}
