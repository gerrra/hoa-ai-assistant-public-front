import { api } from '../shared/http';
import { debug } from './debug';

export const chatManager = {
  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  async getMessages(conversationId: string) {
    debug.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è conversation:', conversationId);
    debug.log('üîç URL –∑–∞–ø—Ä–æ—Å–∞:', `/chat/${conversationId}/messages?limit=100`);
    
    try {
      const response = await api.get(`/chat/${conversationId}/messages`, { 
        params: { limit: 100 } 
      });
      
      debug.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:', response.data);
      return { messages: response.data, conversationId };
    } catch (error: any) {
      debug.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      debug.error('‚ùå –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response?.status);
      debug.error('‚ùå URL –æ—à–∏–±–∫–∏:', error.config?.url);
      
      if (error.response?.status === 404) {
        // Conversation –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        debug.log('üîÑ Conversation –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...');
        const newData = await this.createNewConversation();
        return { messages: [], conversationId: newData.conversation_id };
      }
      
      // –ü—Ä–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ —Ç–æ–∂–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é conversation
      debug.log('üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é conversation –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏...');
      const newData = await this.createNewConversation();
      return { messages: [], conversationId: newData.conversation_id };
    }
  },
  
  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é conversation
  async createNewConversation(title = '–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥') {
    try {
      debug.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é conversation...');
      debug.log('üîÑ –°—Ç–∞—Ä—ã–π ID –≤ localStorage:', localStorage.getItem('conversationId'));
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π ID
      this.clearConversation();
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      await api.post('/chat/new-session');
      debug.log('‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      
      // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º conversation
      const response = await api.post('/chat/start', { title });
      debug.log('‚úÖ –ù–æ–≤–∞—è conversation —Å–æ–∑–¥–∞–Ω–∞:', response.data);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π conversation ID
      this.forceUpdateConversationId(response.data.conversation_id);
      
      return response.data;
    } catch (error) {
      debug.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è conversation:', error);
      throw error;
    }
  },
  
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π conversation
  async sendMessage(conversationId: string, message: string, meta?: any, role: string = 'user') {
    try {
      debug.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ conversation:', conversationId, '—Å —Ä–æ–ª—å—é:', role);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ conversation
      try {
        await api.get(`/chat/${conversationId}/messages`, { params: { limit: 1 } });
        debug.log('‚úÖ Conversation —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } catch (error: any) {
        if (error.response?.status === 404) {
          debug.log('üîÑ Conversation –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...');
          const newData = await this.createNewConversation();
          conversationId = newData.conversation_id;
        } else {
          throw error;
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const response = await api.post(`/chat/${conversationId}/messages`, {
        role: role,
        content: message,
        meta: meta || { timestamp: new Date().toISOString() }
      });
      
      debug.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ä–æ–ª—å—é:', role);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π conversation ID
      this.forceUpdateConversationId(conversationId);
      
      return { conversationId, success: true, data: response.data };
    } catch (error) {
      debug.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ conversations
  async getConversations() {
    try {
      debug.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ conversations...');
      const response = await api.get('/chat/list');
      debug.log('‚úÖ Conversations –ø–æ–ª—É—á–µ–Ω—ã:', response.data);
      return response.data;
    } catch (error: any) {
      debug.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ conversations:', error);
      
      if (error.response?.status === 401) {
        // –ù–µ—Ç —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        debug.log('üîÑ –ù–µ—Ç —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...');
        await this.createNewConversation();
        return [];
      }
      
      return [];
    }
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ conversation
  async checkConversationExists(conversationId: string): Promise<boolean> {
    try {
      await api.get(`/chat/${conversationId}/messages`, { params: { limit: 1 } });
      return true;
    } catch (error: any) {
      return error.response?.status !== 404;
    }
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å conversation
  async getOrCreateConversation(existingId?: string) {
    if (existingId) {
      const exists = await this.checkConversationExists(existingId);
      if (exists) {
        debug.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é conversation:', existingId);
        return existingId;
      }
    }
    
    debug.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é conversation...');
    const newData = await this.createNewConversation();
    return newData.conversation_id;
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é conversation ID –∏–∑ localStorage
  getCurrentConversationId(): string | null {
    const id = localStorage.getItem('conversationId');
    debug.log('üìñ –ü–æ–ª—É—á–∞–µ–º conversation ID –∏–∑ localStorage:', id);
    return id;
  },
  
  // –û—á–∏—Å—Ç–∏—Ç—å conversation
  clearConversation() {
    debug.log('üßπ –û—á–∏—â–∞–µ–º conversation...');
    debug.log('üßπ –°—Ç–∞—Ä—ã–π ID –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π:', localStorage.getItem('conversationId'));
    localStorage.removeItem('conversationId');
    localStorage.removeItem('hoa_chat_cid'); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    debug.log('üßπ ID –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:', localStorage.getItem('conversationId'));
  },
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å conversation ID
  forceUpdateConversationId(newId: string) {
    debug.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º conversation ID –Ω–∞:', newId);
    debug.log('üîÑ –°—Ç–∞—Ä—ã–π ID –≤ localStorage:', localStorage.getItem('conversationId'));
    localStorage.setItem('conversationId', newId);
    debug.log('‚úÖ –ù–æ–≤—ã–π ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:', newId);
  }
};
