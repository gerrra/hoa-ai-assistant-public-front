import React, { useState, useEffect, useRef } from 'react'
import { askQuestion, getCommunities, Community } from '../lib/api'
import { chatManager } from '../utils/chatManager'
import { useChatHistory } from '../hooks/useChatHistory'
import SourcesList from '../components/SourcesList'

export default function PublicWidget(){
  const [question, setQ] = useState('')
  const [role, setRole] = useState<'resident'|'board'|'staff'>('resident')
  const [communityId, setCid] = useState<number | ''>('')
  const [isLoading, setIsLoading] = useState(false)
  const [communities, setCommunities] = useState<Community[]>([])
  const [communitiesLoading, setCommunitiesLoading] = useState(true)
  
  
  const { messages, addMessage, refreshMessages, conversationId, createNewConversation, updateConversationId } = useChatHistory()
  const chatAreaRef = useRef<HTMLDivElement>(null)

  // Auto-scroll to bottom when messages change
  const scrollToBottom = () => {
    if (chatAreaRef.current) {
      chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight
    }
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages, isLoading])

  // Load communities on component mount
  useEffect(() => {
    const loadCommunities = async () => {
      try {
        console.log('Loading communities...');
        console.log('Current API base URL:', import.meta.env.VITE_API_BASE_URL);
        
        const communitiesData = await getCommunities()
        console.log('Loaded communities:', communitiesData);
        console.log('Communities count:', communitiesData.length);
        
        if (communitiesData.length === 0) {
          console.warn('No communities found in API response');
        }
        
        setCommunities(communitiesData)
        // Set first community as default if available
        if (communitiesData.length > 0) {
          setCid(communitiesData[0].id)
          console.log('Set default community:', communitiesData[0].id);
        } else {
          console.warn('No communities available, communityId will remain empty');
        }
      } catch (error) {
        console.error('Failed to load communities:', error)
        console.error('Error type:', typeof error);
        console.error('Error message:', error.message);
        
        // Fallback data for testing
        const fallbackCommunities = [
          { id: 1, name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ 1', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ 1' },
          { id: 2, name: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ 2', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ 2' }
        ];
        console.log('Using fallback communities:', fallbackCommunities);
        setCommunities(fallbackCommunities);
        setCid(fallbackCommunities[0].id);
      } finally {
        setCommunitiesLoading(false)
      }
    }

    loadCommunities()
  }, [])


  const onAsk = async () => {
    if(!question.trim() || !communityId) return
    
    const currentQuestion = question.trim()
    setQ('') // Clear input immediately
    setIsLoading(true)
    
    try {
      console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å:', {
        question: currentQuestion,
        community_id: communityId,
        role: role,
        conversation_id: conversationId,
        timestamp: new Date().toISOString()
      });
      console.log('üîç ID –≤ localStorage –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:', localStorage.getItem('conversationId'));
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ conversation
      let currentConversationId = conversationId;
      if (currentConversationId) {
        try {
          const result = await chatManager.sendMessage(currentConversationId, currentQuestion, { 
            community_id: communityId, 
            role: role 
          }, 'user');
          currentConversationId = result.conversationId;
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ conversation:', currentConversationId);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º conversation ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
          if (currentConversationId !== conversationId) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º conversation ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å', conversationId, '–Ω–∞', currentConversationId);
            updateConversationId(currentConversationId);
            console.log('‚úÖ ID –≤ localStorage –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', localStorage.getItem('conversationId'));
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
      }
      
      // Add user message to history
      addMessage({
        id: Date.now(),
        role: 'user',
        content: currentQuestion,
        created_at: new Date().toISOString(),
        meta: { community_id: communityId, role }
      })
      
      // Scroll to bottom after adding user message
      setTimeout(scrollToBottom, 100)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
      const data = await askQuestion(currentQuestion, { 
        community_id: communityId, 
        role,
        conversation_id: currentConversationId 
      })
      
      console.log('üìã –û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ–ª—É—á–µ–Ω:', {
        answer: data.answer,
        sources: data.sources,
        confidence: data.confidence,
        conversation_id: data.conversation_id
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ conversation
      const finalConversationId = data.conversation_id || currentConversationId;
      if (finalConversationId) {
        try {
          await chatManager.sendMessage(finalConversationId, data.answer || '', { 
            sources: data.sources,
            confidence: data.confidence
          }, 'assistant');
          console.log('‚úÖ –û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ conversation:', finalConversationId);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º conversation ID –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
          if (finalConversationId !== conversationId) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º conversation ID –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å', conversationId, '–Ω–∞', finalConversationId);
            updateConversationId(finalConversationId);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
        }
      }
      
      // Add AI response to history
      addMessage({
        id: Date.now() + 1,
        role: 'assistant',
        content: data.answer || '',
        created_at: new Date().toISOString(),
        meta: { sources: data.sources, confidence: data.confidence }
      })
      
      // Scroll to bottom after adding AI response
      setTimeout(scrollToBottom, 100)
      
      // Refresh messages to get latest from server
      if (finalConversationId) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º conversation ID:', finalConversationId)
        console.log('üîÑ –¢–µ–∫—É—â–∏–π conversation ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:', conversationId)
        console.log('üîÑ ID –≤ localStorage –ø–µ—Ä–µ–¥ refresh:', localStorage.getItem('conversationId'))
        await refreshMessages(finalConversationId)
        console.log('‚úÖ ID –≤ localStorage –ø–æ—Å–ª–µ refresh:', localStorage.getItem('conversationId'))
      } else {
        console.warn('‚ö†Ô∏è –ù–µ—Ç finalConversationId –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π')
      }
      
    } catch(e: any) { 
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞:', e)
      
      // Detailed error handling
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      
      if (e.code === 'NETWORK_ERROR' || e.message?.includes('Network Error')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
      } else if (e.response?.status === 404) {
        errorMessage = '–û—à–∏–±–∫–∞ 404: endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
      } else if (e.response?.status === 500) {
        errorMessage = '–û—à–∏–±–∫–∞ 500: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      } else if (e.response?.status === 400) {
        errorMessage = '–û—à–∏–±–∫–∞ 400: –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
      } else if (e.code === 'ECONNABORTED' || e.message?.includes('timeout')) {
        errorMessage = '–¢–∞–π–º–∞—É—Ç: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
      } else if (e.response?.data?.detail) {
        errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${e.response.data.detail}`
      } else if (e.message) {
        errorMessage = e.message
      }
      
      // Add error message to chat
      addMessage({
        id: Date.now() + 1,
        role: 'assistant',
        content: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`,
        created_at: new Date().toISOString(),
        meta: { error: true }
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      onAsk()
    }
  }

  return (
    <div className="chat-container">
      {/* Header */}
      <div className="chat-header">
        <div className="header-content">
          <h1>HOA –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</h1>
          <div className="header-controls">
            <select value={role} onChange={e=>setRole(e.target.value as any)} className="role-select">
              <option value="resident">–ñ–∏—Ç–µ–ª—å</option>
              <option value="board">–ü—Ä–∞–≤–ª–µ–Ω–∏–µ</option>
              <option value="staff">–ü–µ—Ä—Å–æ–Ω–∞–ª</option>
            </select>
            <select 
              value={communityId} 
              onChange={e=>setCid(e.target.value ? Number(e.target.value) : '')} 
              className="community-select"
              disabled={communitiesLoading}
            >
              <option value="">
                {communitiesLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 
                 communities.length === 0 ? '–ù–µ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤' : '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ'}
              </option>
              {communities.map(community => (
                <option key={community.id} value={community.id}>
                  {community.name}
                </option>
              ))}
            </select>
            <button 
              onClick={createNewConversation}
              className="new-conversation-button"
              title="–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"
            >
              üÜï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            </button>
            <button 
              onClick={() => {
                console.log('üßπ –û—á–∏—â–∞–µ–º localStorage...');
                localStorage.clear();
                console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                window.location.reload();
              }}
              className="clear-conversation-button"
              title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å"
            >
              üßπ –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
        </div>
        
      </div>

      {/* Chat Area */}
      <div className="chat-area" ref={chatAreaRef}>
        {messages.length === 0 && !isLoading && (
          <div className="welcome-message">
            <h2>–ß—Ç–æ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —É–º–µ?</h2>
            <p>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</p>
          </div>
        )}

        {/* Chat History */}
        {messages.map((msg, index) => (
          <div key={msg.id} className={`message ${msg.role === 'user' ? 'user-message' : 'ai-message'}`}>
            <div className="message-content">
              {msg.content}
            </div>
            {msg.role === 'assistant' && msg.meta?.sources && msg.meta.sources.length > 0 && (
              <SourcesList items={msg.meta.sources} />
            )}
          </div>
        ))}

        {isLoading && (
          <div className="message ai-message">
            <div className="message-content">
              <div className="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
              </div>
            </div>
          </div>
        )}
      </div>


      {/* Input Area */}
      <div className="input-area">
        <div className="input-container">
          <div className="input-wrapper">
            <textarea 
              value={question} 
              onChange={e=>setQ(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å..."
              className="message-input"
              rows={1}
            />
            <button 
              onClick={onAsk} 
              disabled={isLoading || !question.trim()}
              className="send-button"
            >
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M7 11L12 6L17 11M12 18V7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
